name: Unit test

on: 
  push:     

jobs: 
  check-formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # GitHub Action used in workflows to check out your repository's code so subsequent steps in the workflow can access the files in it. It is like a download of the files.

      - name: Begin
        run: echo "Beginning to check code formatting"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Code Formatting
        run: |
          echo "Checking code formatting..."
          make check
  
  check-branch-name:
    needs: check-formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Checks out your repository's code.

      - name: Verify Branch Name Format
        run: |
          # Get the current branch name from the GitHub context
          # Branch refs in github.ref always start with refs/heads/
          BRANCH_NAME="${{ github.ref }}"
          echo "Checking branch name: $BRANCH_NAME"

          # This regex now only allows branch names that start with 'feature/'.
          if [[ ! "$BRANCH_NAME" =~ ^refs/heads/feature\/.*$ ]]; then
            echo "Error: Branch name '$BRANCH_NAME' does not follow the required pattern."
            echo "Please ensure your branch name starts with 'feature/' (e.g., feature/add-new-feature)."
            exit 1 # Fails the job if the pattern doesn't match
          else
            echo "Branch name '$BRANCH_NAME' follows the required pattern."
          fi
        shell: bash

  # Job to verify commit messages against a predefined pattern
  check-commit-pattern:
    runs-on: ubuntu-latest
    needs: check-branch-name # This job will only run if 'check-branch-name' succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Important: Fetch full history to get all commit messages for the push

      - name: Verify Commit Messages Format
        run: |
          echo "Checking commit messages for the current push..."

          # Get all commit messages for the current push.
          # ${{ github.event.before }} is the commit before the push
          # ${{ github.sha }} is the last commit of the push
          # If github.event.before is the "zero" SHA (initial push), check all commits up to github.sha.
          # Otherwise, check commits from github.event.before to github.sha.
          
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            COMMIT_MESSAGES=$(git log --format=%B ${{ github.sha }})
          else
            COMMIT_MESSAGES=$(git log --format=%B ${{ github.event.before }}..${{ github.sha }})
          fi

          # Define your desired commit pattern (e.g., Conventional Commits).
          # This regex enforces a type (feat, fix, docs, etc.) followed by a colon and a space, then a message.
          # Example: "feat: Add user authentication" or "fix: Resolve critical bug"
          COMMIT_PATTERN="^(feat|fix|docs|chore|refactor|test|build|ci|perf|revert): .+"

          # Use grep to find any commit messages that DO NOT match the pattern.
          # -q: quiet, suppresses output
          # -E: extended regex
          # -v: invert match (select non-matching lines)
          if echo "$COMMIT_MESSAGES" | grep -qEv "$COMMIT_PATTERN"; then
            echo "Error: One or more commit messages do not follow the required pattern."
            echo "Please ensure all commit messages adhere to a standard format (e.g., Conventional Commits)."
            echo "Example allowed patterns:"
            echo "  feat: Your new feature description"
            echo "  fix: Your bug fix description"
            echo "  docs: Your documentation update"
            echo "  chore: Routine maintenance task"
            echo "  refactor: Code refactoring"
            echo "  test: New test case"
            echo "  build: Build system changes"
            echo "  ci: CI configuration changes"
            echo "  perf: Performance improvements"
            echo "  revert: Revert a previous commit"
            echo ""
            echo "Commit messages found in this push:"
            echo "$COMMIT_MESSAGES" # Output all commit messages for debugging
            echo "Run git rebase -i HEAD~N in your terminal. N is the number of commits to retrieve"
            echo "Change the word pick to reword (or r) next to the commit(s) whose message you want to change. Save and close the editor"
            echo "Run git push --force-with-lease origin <your-branch-name> in your terminal"
            exit 1 # Fails the job if any commit message doesn't match
          else
            echo "All commit messages follow the required pattern."
          fi
        shell: bash
    
  